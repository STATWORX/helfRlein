% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dive.R
\name{dive}
\alias{dive}
\title{a debugging function to dive in}
\usage{
dive(x, return = "cons")
}
\arguments{
\item{x}{a string with a function or apply call}

\item{return}{a string either of type \code{"cons"}, \code{"env"} or
\code{"list"}. Further information in the return section.}
}
\value{
The function has several return options:
\itemize{
\item \code{"cons"} prints the arguments into the console
\item \code{"env"} evaluates the arguments in the global 
\item \code{"list"} returns a list with the arguments.
}
When using *apply debugging only the return \code{"cons"} and \code{"list"}
are available, since there is not guess for the iterator.
}
\description{
A function which simplifies debugging attempts of self-written R functions.
The main objective of this function is to get default and pre-specified arguments
of a function into a user-specified output. This output can either be the
global environment, a list or a console print.
}
\details{
A word of caution: If you have string arguments in functions 
         like in the \code{\link{paste}}, you have to escape the quotation 
         marks. Suppose we want to debug the \code{\link{paste}} function
         with \code{\link{dive}}. Then specifying the argument \code{x} won't
         be work with \code{x = "paste("Hello World")"}, since there will be
         unexpected symbols in \code{"paste("Hello World")"}. Thus the correct
         specification is:
         \code{x = "paste(\"Hello World\")"}.
}
\note{
Version 1.0 - 09adcdad5a26fa0f8739434b36c02d106e340ed2
}
\examples{
# Define a function
foo <- function(x = 3, y = 1, z = 1, type = "add") {
 if (type == "add") {
 OUT <- z+y+x
 } else if (type == "vec") {
 OUT <- c(z,y,x)
 } else {
 OUT <- list(z,y,x)
 }
return(OUT)
}
# Save the debug option into a string
my.debug <- "foo(x = 2, y = 3, z = 2)"
# Get the arguments with dive
dive(my.debug, return = "cons")

# Try dive with an apply function
my.apply.debug <- "lapply(c(1,3,5), FUN = foo, y = 6, z = 2)"
# Get the arguments with dive
dive(my.apply.debug, return = "cons")

# Try dive with a character argument
# Escape strings
my.string.debug <- "lapply(c(1,3,5), FUN = foo, y = 2, z = 1, type = \"vec\")"
dive(my.string.debug, return = "cons")

}
\seealso{
For more information and updates see 
\href{https://github.com/andrebleier/dive}{here}.
}
\author{
Andre Bleier
}
